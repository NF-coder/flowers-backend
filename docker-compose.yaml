services:
  postgres:
    image: postgres:13.3
    container_name: database
    restart: always
    environment:
      POSTGRES_DB: "db"
      POSTGRES_USER: "release"
      POSTGRES_PASSWORD: "horse_ate_green_guinea_pig"
    volumes:
      - postgres_data:/var/lib/postgresql/data  # Volume для хранения данных
    healthcheck:
      test: ["CMD", "pg_isready", "-d", "db", "-U", "release"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s
    #ports:
    #  - "5432:5432" # проброшены для дебага и удобства разработки, на релизе убрать
    networks:
      - net_postgres
  
  redis:
    image: redis
    container_name: redis
    restart: always
    environment:
      WORKDIR: "/redis_data"
    volumes:
      - redis_data:/redis_data  # Volume для хранения данных
    #ports:
    #  - "6379:6379" # проброшены для дебага и удобства разработки, на релизе убрать
    networks:
      - net_auth

  catalog_controller:
    container_name: catalog_controller
    depends_on:
      postgres:
        condition: service_healthy
    build: ./v2/db_services/Catalog
    networks:
      - net_postgres
  
  email_auth_controller:
    container_name: email_auth_controller
    depends_on:
      postgres:
        condition: service_healthy
    build: ./v2/db_services/EmailAuth
    networks:
      - net_postgres
  
  geo_controller:
    container_name: geo_controller
    depends_on:
      postgres:
        condition: service_healthy
    build: ./v2/db_services/Geo
    networks:
      - net_postgres
  
  order_controller:
    container_name: order_controller
    depends_on:
      postgres:
        condition: service_healthy
    build: ./v2/db_services/Order
    networks:
      - net_postgres

  tg_id_auth_controller:
    container_name: tg_id_auth_controller
    depends_on:
      postgres:
        condition: service_healthy
    build: ./v2/db_services/TgIdAuth
    networks:
      - net_postgres
  
  product_additional_images_controller:
    container_name: product_additional_images_controller
    depends_on:
      postgres:
        condition: service_healthy
    build: ./v2/db_services/ProductAdditionalImages
    networks:
      - net_postgres

  users_controller:
    container_name: users_controller
    depends_on:
      postgres:
        condition: service_healthy
    build: ./v2/db_services/Users
    networks:
      - net_postgres

  buisness_logic:
    container_name: buisness_logic
    build: ./v2/buisness_logic
    depends_on:
      - users_controller
      - product_additional_images_controller
      - tg_id_auth_controller
      - order_controller
      - geo_controller
      - email_auth_controller
      - catalog_controller
    networks:
      - net_logic
      - net_postgres
    #extra_hosts:
    #  - "host.docker.internal:host-gateway"

  rest_gateway:
    container_name: rest_gateway
    depends_on:
      - buisness_logic
    build: ./v2/rest_gateway
    networks:
      - net_logic
      - net_gateway
    #extra_hosts:
    #  - "host.docker.internal:host-gateway"

  rest_gateway_nginx:
    container_name: nginx
    depends_on:
      - rest_gateway
      - images_uploader
    build: ./v2/rest_gateway_nginx
    ports:
      #- "80:80"
      - "443:443"
    networks:
      - net_gateway
    #extra_hosts:
    #  - "host.docker.internal:host-gateway"
  
  images_uploader:
    container_name: images_uploader
    build: ./v2/images_uploader
    networks:
      - net_gateway
    volumes:
      - images_storage:/images

networks:
  net_gateway:
    driver: bridge
  net_postgres:
    driver: bridge
  net_auth:
    driver: bridge

volumes:
  images_storage:
  postgres_data:
  redis_data: